# ==== CODEBOOK (numeric) ====
# 0=C (cyan), 1=M (magenta), 2=Y (yellow), 3=G (soft-green)

CODEBOOK_NUM = [
    [3,3,1,1,3,3,2,1,3,3,1,0,1,0,0,0],
    [3,2,3,0,2,2,2,0,0,3,2,2,1,2,2,1],
    [1,3,3,3,2,2,3,0,3,3,0,1,1,1,3,2],
    [1,3,2,2,3,3,0,3,2,1,3,0,1,0,2,2],
    [3,0,0,2,3,2,3,0,0,2,1,0,1,3,1,3],
    [1,1,2,3,1,1,3,0,3,1,3,1,2,3,3,0],
    [0,1,2,3,2,1,2,0,3,1,3,3,3,0,0,2],
    [2,2,0,2,1,0,1,1,0,2,1,3,3,1,2,1],
    [2,3,3,2,3,1,0,0,2,0,2,0,2,1,1,1],
    [1,1,3,3,0,3,0,3,1,1,2,3,0,0,0,3],
    [1,1,1,0,0,2,0,1,1,2,1,1,0,2,2,0],
    [3,3,3,1,0,1,3,3,1,0,3,1,1,2,2,1],
    [1,3,2,2,0,0,2,1,0,3,2,3,3,1,1,1],
    [1,0,0,0,3,0,0,2,2,3,0,2,0,3,3,3],
    [2,2,3,0,0,1,3,0,3,0,0,3,0,0,0,2],
    [2,2,0,3,1,3,1,3,2,1,0,3,1,0,3,1],
    [1,3,1,0,3,1,0,1,1,1,3,1,0,0,3,2],
    [0,3,2,1,1,2,1,1,3,2,1,0,1,1,2,2],
    [2,3,2,0,3,0,3,0,0,2,0,0,0,0,0,2],
    [3,2,2,2,1,2,0,2,1,3,1,1,2,3,1,0],
    [3,2,2,1,1,0,0,3,1,2,0,3,0,1,1,0],
    [1,1,3,3,2,3,2,3,3,2,2,2,0,1,2,1],
    [1,0,1,0,1,3,2,3,1,1,3,1,2,0,2,3],
    [2,3,0,2,3,1,1,0,1,0,2,3,0,2,3,3],
    [1,2,0,0,0,0,3,3,2,2,1,3,3,2,2,1],
    [3,1,3,3,0,2,0,1,0,0,1,1,0,0,2,2],
    [2,1,2,3,2,2,2,2,3,3,0,2,2,1,0,3],
    [1,2,2,2,1,2,1,0,3,2,0,3,2,0,3,3],
    [2,2,0,1,1,0,2,0,3,0,0,3,2,3,1,1],
    [2,2,1,2,2,0,0,0,3,2,2,0,1,1,2,2],
    [1,3,2,0,0,0,2,3,0,1,2,2,1,0,2,3],
    [0,3,2,3,2,2,3,2,0,2,2,2,2,1,3,3],
    [3,3,1,1,2,0,3,0,2,2,3,2,1,0,2,2],
    [0,3,2,2,0,2,3,2,1,1,1,2,1,0,2,3],
    [3,2,2,0,1,3,0,3,2,2,3,1,2,0,2,2],
    [1,2,0,2,3,2,3,1,0,1,3,2,0,3,1,1],
    [2,0,0,3,1,2,1,1,1,0,1,2,3,1,3,1],
    [0,1,2,1,3,0,1,2,0,1,3,3,2,1,2,3],
    [0,0,3,1,0,3,3,3,0,2,2,0,0,1,2,1],
    [0,0,2,0,3,3,2,0,1,2,1,0,2,1,3,2],
    [3,2,1,2,0,2,0,1,1,3,2,2,3,2,3,0],
    [0,1,1,2,3,2,0,0,1,3,0,2,2,0,2,0],
    [2,1,3,3,0,0,3,3,2,0,0,2,2,0,3,0],
    [0,3,3,3,2,3,2,2,0,3,3,0,1,3,2,3],
    [0,3,3,0,1,0,0,2,1,3,1,0,0,2,1,1],
    [0,1,2,3,3,1,3,3,2,1,1,0,3,0,3,2],
    [2,2,2,0,3,0,1,2,2,0,3,3,3,2,1,2],
    [2,2,1,3,0,2,1,0,1,2,0,3,3,3,3,1],
    [1,2,1,2,1,0,2,0,2,2,3,3,3,1,2,3],
    [3,1,1,2,0,1,0,1,3,1,2,0,3,1,0,2],
    [3,0,1,1,0,2,2,2,3,1,3,0,1,1,3,3],
    [2,2,3,2,3,1,3,1,3,1,1,3,3,1,3,1],
    [1,2,1,0,0,0,1,3,0,1,3,3,3,2,3,3],
    [0,1,3,0,3,3,2,1,0,2,1,1,3,1,3,1],
    [3,0,1,3,1,1,2,2,3,3,2,1,0,0,1,0],
    [1,2,1,0,1,0,1,1,0,3,0,1,0,0,0,1],
    [0,1,0,1,0,2,0,0,3,3,2,1,1,1,1,1],
    [3,2,3,3,0,0,0,1,2,2,2,2,2,2,3,0],
    [3,2,0,3,3,0,3,3,3,3,3,0,2,0,0,2],
    [3,3,3,2,0,0,1,2,0,1,2,2,2,3,3,2],
    [2,0,1,3,1,0,3,0,0,0,0,0,1,0,2,2],
    [1,1,0,3,2,0,2,2,3,1,1,3,2,3,3,3],
    [1,3,2,0,1,3,3,3,3,2,2,2,3,2,3,3],
    [3,1,2,0,1,0,0,2,3,3,0,2,1,1,3,3],
    [3,0,2,2,0,1,0,1,2,1,0,3,3,1,3,0],
    [3,0,2,3,2,2,2,1,0,1,2,1,3,2,1,1],
    [0,1,0,1,3,0,2,1,2,1,2,2,1,2,3,0],
    [3,2,2,0,0,0,1,0,0,1,2,0,3,2,2,3],
    [1,1,2,3,2,2,0,0,3,0,1,1,2,1,3,3],
    [3,3,2,2,0,3,0,0,2,1,1,3,2,3,1,0],
    [0,0,0,3,0,1,0,1,0,3,2,3,0,2,1,3],
    [2,3,1,3,0,0,2,2,1,1,0,3,1,1,1,1],
    [1,3,1,1,1,0,2,0,2,1,0,2,2,1,2,1],
    [2,3,1,1,0,2,1,2,0,0,0,1,2,1,2,3],
    [1,0,0,0,0,3,0,2,1,2,0,2,3,3,2,2],
    [2,0,3,0,2,0,2,3,0,1,1,3,1,2,2,0],
    [3,1,0,0,1,3,2,2,0,3,2,2,1,3,0,1],
    [0,1,2,1,2,1,1,2,1,3,2,2,0,2,1,2],
    [2,2,1,3,1,2,1,3,1,3,0,1,2,3,2,3],
    [3,0,1,3,0,3,1,1,1,3,2,3,0,0,3,0],
    [1,2,3,2,2,1,2,1,2,1,3,0,2,0,1,3],
    [0,0,0,0,1,3,2,1,1,0,0,0,3,1,3,1],
    [0,0,0,2,1,1,1,0,2,3,2,3,2,0,2,3],
    [2,2,2,3,2,2,3,3,3,0,1,0,2,3,1,2],
    [0,0,3,3,0,0,1,1,1,0,1,3,0,0,1,2],
    [1,2,0,2,1,1,2,2,2,0,3,2,3,1,2,1],
    [0,1,3,3,1,3,0,1,3,0,1,0,3,3,3,3],
    [1,3,3,2,3,1,1,1,3,1,1,2,1,3,0,0],
    [3,0,3,1,3,2,1,3,1,2,0,1,2,0,0,2],
    [1,0,3,2,1,0,0,0,2,1,2,2,2,3,1,1],
    [2,0,1,3,3,1,1,3,2,0,1,1,3,3,2,0],
    [0,2,3,1,3,3,2,0,3,1,2,1,0,1,3,3],
    [3,1,2,2,3,1,0,0,3,1,3,0,2,2,3,0],
    [2,2,3,1,0,2,1,1,1,3,2,0,2,1,3,2],
    [3,0,1,2,2,3,3,1,0,1,1,2,0,0,1,3],
    [2,0,3,2,3,3,3,0,3,2,0,3,0,0,1,1],
    [3,2,0,0,3,2,0,1,1,0,0,3,0,3,3,2],
    [2,3,3,3,2,1,3,0,0,2,3,0,0,1,1,0],
    [0,2,1,0,0,2,3,1,0,0,1,2,1,3,3,3],
    [0,2,3,2,0,1,0,3,1,2,0,1,3,2,0,1],
    [3,2,1,1,3,2,0,0,3,3,3,1,1,1,3,3],
    [1,2,3,0,1,3,0,2,0,3,1,0,3,0,1,1],
    [1,1,1,1,0,0,3,3,1,3,2,1,2,1,2,0],
    [3,3,0,1,0,3,0,2,3,3,0,0,3,2,1,1],
    [2,0,2,3,0,3,0,1,2,1,1,0,1,1,1,2],
    [1,0,2,3,0,0,2,0,2,3,3,1,3,0,2,3],
    [2,3,3,0,1,3,1,3,1,3,0,0,3,1,3,3],
    [3,2,2,1,2,3,1,2,3,1,1,2,1,2,3,3],
    [0,0,1,1,3,1,0,1,2,0,2,0,3,2,0,0],
    [2,2,1,1,3,3,1,0,0,1,0,0,0,0,2,0],
    [1,2,0,2,0,0,2,1,2,0,3,3,0,2,3,3],
    [1,1,2,3,3,1,0,2,0,1,2,2,3,0,2,2],
    [2,2,0,1,0,3,3,0,2,0,2,1,2,3,1,3],
    [1,1,0,3,3,2,3,3,2,0,3,3,2,3,0,1],
    [0,1,0,0,3,3,0,3,2,2,2,3,3,1,2,3],
    [2,2,0,1,3,2,2,3,1,3,2,3,0,1,0,1],
    [1,0,1,2,2,2,1,3,2,1,0,2,3,2,2,3],
    [0,0,0,3,1,0,1,0,2,1,0,3,0,3,3,0],
    [0,2,0,3,1,3,2,0,2,2,0,3,1,1,3,0],
    [2,0,2,2,3,0,1,2,3,1,0,2,0,3,2,2],
    [0,0,3,2,0,2,1,0,3,1,3,2,2,1,1,3],
    [2,0,0,1,3,2,3,2,3,1,2,3,0,2,3,0],
    [0,3,1,0,1,3,1,1,1,1,1,1,2,0,0,3],
]
# (length = 123)

# === mapping helpers ===
IDX2SYM = {0:'C', 1:'M', 2:'Y', 3:'G'}
SYM2IDX = {'C':0, 'M':1, 'Y':2, 'G':3}

def ints_to_syms(seq_int):
    """[0,1,2,3] -> ['C','M','Y','G']"""
    return [IDX2SYM[i] for i in seq_int]

def syms_to_ints(seq_sym):
    """['C','M',...] -> [0,1,...]"""
    return [SYM2IDX[s] for s in seq_sym]

def match_id_rotation_window(seq16_syms, codebook_num, window=6):
    """
    Rotation-invariant match using a length-6 window.
    Returns: (best_code_index, best_match_count) or (None, 0) if not enough data.
    """
    if len(seq16_syms) < window:
        return (None, 0)

    obs_int = syms_to_ints(seq16_syms)
    best_idx, best_score = None, -1

    for idx, code in enumerate(codebook_num):
        # Try all rotations of the 16-length code
        for rot in range(16):
            rot_code = code[rot:] + code[:rot]
            # Slide a length-6 window and count exact matches
            for j in range(16 - window + 1):
                score = sum(1 for a, b in zip(obs_int[j:j+window], rot_code[j:j+window]) if a == b)
                if score > best_score:
                    best_score = score
                    best_idx = idx

    return (best_idx, best_score)

